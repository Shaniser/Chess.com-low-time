console.log("Foreground Script with Dynamic Ticking and Turn Check");

let tickSound = new Audio("data:audio/mp3;base64,"); // Short ticking sound
tickSound.volume = 0.1; // Set the volume once
let tickingInterval = null; // Variable to store the setInterval identifier
const syncTickingInterval = 200; // Synchronization interval (ms)
let lastSecondsLeft = null; // Last known remaining time (seconds)
let lastIsMyTurn = null; // Last known turn status
let staticSecondsCounter = 0; // Counter for static time
let speedLevel = -1;

/**
 * Check if it's the player's turn
 * @param {Element} clockElement - The timer element
 * @returns {boolean} - True if it is the player's turn
 */
function isItMyTurn(clockElement) {
    return clockElement && clockElement.classList.contains("clock-player-turn");
}

/**
 * Play the ticking sound
 */
function playTickSound() {
    tickSound.currentTime = 0; // Reset sound playback
    tickSound.play(); // Play the sound
}

/**
 * Stop the ticking sound
 */
function stopTicking() {
    if (tickingInterval) {
        clearInterval(tickingInterval); // Clear the ticking interval
        tickingInterval = null;
    }
}

/**
 * Main function to synchronize the timer and turn status
 */
async function syncTicking() {
    try {
        // Locate the timer element
        const myClock = document
            .getElementById("board-layout-player-bottom")
            ?.getElementsByClassName("clock-component")[0];
        if (!myClock) {
            stopTicking();
            return; // Exit if the timer element is not found
        }

        const remain = myClock.querySelector("span")?.innerHTML;
        if (!remain) {
            stopTicking();
            return; // Exit if the timer value is not found
        }

        // Parse the remaining time (minutes and seconds)
        const [completeMinLeft, secondsLeft] = remain.split(":").map(Number);

        // Check if it's currently the player's turn
        const myTurn = isItMyTurn(myClock);

        if (myTurn) {
            // If less than a minute is left, adjust ticking speed
            if (completeMinLeft === 0) {
                const newSpeedLevel = Math.floor(secondsLeft / 10);

                // Play the sound immediately if the turn has just changed
                if (lastIsMyTurn !== myTurn || speedLevel !== newSpeedLevel) {
                    playTickSound();
                }

                // Calculate the interval for ticking, minimum is 100 ms
                const interval = Math.max(100, (secondsLeft * 1000) / 60);
                if (!tickingInterval || speedLevel !== newSpeedLevel) {
                    clearInterval(tickingInterval); // Reset the previous interval
                    tickingInterval = setInterval(playTickSound, interval);
                    speedLevel = newSpeedLevel;
                }
            }
        } else {
            // Stop ticking if it's not the player's turn
            stopTicking();
        }

        // Check if the time or turn status has changed
        if (lastSecondsLeft === secondsLeft && lastIsMyTurn === myTurn) {
            staticSecondsCounter++;
            if (staticSecondsCounter * syncTickingInterval > 1000) {
                // Stop the sound if the time hasn't changed for over 1 second
                stopTicking();
            }
        } else {
            staticSecondsCounter = 0; // Reset the static time counter
        }

        // Update the last known time and turn status
        lastSecondsLeft = secondsLeft;
        lastIsMyTurn = myTurn;
    } catch (error) {
        console.error("Error syncing ticking:", error);
    }
}

/**
 * Initialize the ticking synchronization process
 */
setInterval(syncTicking, syncTickingInterval); // Check the state every 200 ms
